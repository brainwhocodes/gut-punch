name: Build and Release Executables

on:
  push:
    branches:
      - 'release-v*' # Trigger on branches like release-v1.0.0

jobs:
  build-and-release:
    name: Build and Release Executable (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: windows-latest
            asset_name_suffix: .exe
            asset_content_type: application/octet-stream
          - os: ubuntu-latest
            asset_name_suffix: '' # No suffix for Linux
            asset_content_type: application/octet-stream
          - os: macos-latest
            asset_name_suffix: '' # No suffix for macOS
            asset_content_type: application/octet-stream

    permissions:
      contents: write # Required to create releases

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      # Vite build for job files (.mjs) - still needed if CLI imports them or for other purposes
      # If CLI is fully standalone and doesn't need dist/jobs, this can be removed.
      - name: Build job files (Vite)
        run: bun run build

      - name: Extract version from branch
        id: extract_version
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          VERSION=${BRANCH_NAME#release-v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Determine executable name
        id: exec_name
        run: |
          EXECUTABLE_NAME="gutpunch-cli-${{ steps.extract_version.outputs.version }}-${{ matrix.os }}${{ matrix.asset_name_suffix }}"
          echo "name=$EXECUTABLE_NAME" >> $GITHUB_OUTPUT
        shell: bash

      - name: Bundle executable with Bun
        run: |
          bun build ./src/cli.ts --compile --outfile ./${{ steps.exec_name.outputs.name }}
        # This command is based on your package.json script 'bundle:executable'

      - name: Archive executable (Windows)
        if: matrix.os == 'windows-latest'
        run: Compress-Archive -Path .\${{ steps.exec_name.outputs.name }} -DestinationPath .\${{ steps.exec_name.outputs.name }}.zip -Force
        shell: pwsh

      - name: Archive executable (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: zip ./${{ steps.exec_name.outputs.name }}.zip ./${{ steps.exec_name.outputs.name }}

      - name: Create GitHub Release
        # This step will run for each OS in the matrix, but only the first one that successfully creates the release will actually create it.
        # Subsequent runs for other OSs will attempt to update the existing release with their assets.
        # To avoid multiple release creations/overwrites, consider a separate job for release creation that depends on all build jobs.
        # For now, this uses softprops/action-gh-release's ability to append files if the release already exists.
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release-v')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          name: Release v${{ steps.extract_version.outputs.version }}
          body: |
            Automated release for Gut-Punch v${{ steps.extract_version.outputs.version }}.
            Commit: ${{ github.sha }}
          draft: false
          prerelease: false
          files: |
            ./${{ steps.exec_name.outputs.name }}.zip
